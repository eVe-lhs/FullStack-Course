The JavaScript developer community has produced a large variety of useful libraries. If you are developing anything more substantial, it is worth it to check if existing solutions are already available. One good place to find libraries is https://applibslist.xyz/. Below is listed some libraries recommended by trustworthy parties.

If your application has to handle complicated data lodash, which we recommended in part 4, is a good library to use. If you prefer functional programming style, you might consider using ramda.

If you are handling times and dates, moment and a new(er) release date-fns offer good tools for that.

Formik and redux-form can be used to handle forms easier. If your application displays graphs, there are multiple options to chose from. Both recharts and highcharts are well recommended.

The immutable.js-library maintained by Facebook provides, as the name suggests, immutable implementations of some data structures. The library could be of use when using Redux, since as we remember from part 6: reducers must be pure functions, meaning they must not modify the store's state but instead have to replace it with a new one when a change occurs. Over the past year some of the popularity of Immutable.js has been taken over by Immer, which provides similar functionality but in a somewhat easier package.

Redux-saga provides an alternative way to make asynchronous actions for redux thunk familiar from part 6. Some embrace the hype and like it. I don't.

For single page applications the gathering of analytics data on the interaction between the users and the page is more challenging than for traditional web-applications where the entire page is loaded. The React Google Analytics -library offers a solution.

You can take advantage of your React know-how when developing mobile applications using Facebook's extremely popular React Native -library.

When it comes to the tools used for the management and bundling of JavaScript projects the community has been very fickle. Best practices have changed rapidly (the years are approximations, nobody remembers that far back in the past):

2011 Bower
2012 Grunt
2013-14 Gulp
2012-14 Browserify
2015- Webpack
Hipsters seem to have lost their interest in tool development after webpack started to dominate the markets. Few years ago Parcel started to make the rounds marketing itself as simple (which Webpack absolutely is not) and faster than Webpack. However after a promising start Parcel has not gathered any steam, and it's beginning to look like it will not be the end of Webpack.

The site https://reactpatterns.com/ provides a concise list of best practices for React, some of which are already familiar from this course. Another similar list is react bits.

Reactiflux is a big chat community of React developers on Discord. It could be one possible place to get support after the course has concluded. For example numerous libraries have their own channels.

If you know some recommendable links or libraries, make a pull request!